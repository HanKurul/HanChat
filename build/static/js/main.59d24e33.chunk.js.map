{"version":3,"sources":["Socket.js","Components/Register/Register.js","Components/Join/Join.js","Components/NewChat/ChatComponents/Rooms.js","Components/NewChat/ChatComponents/Messages.js","Components/NewChat/NewChat.js","App.js","index.js"],"names":["socket","username","userpicture","filereader","GetSocket","console","log","io","GlobalGetUserName","GlobalSetUserName","un","GlobalGetUserPic","GlobalSetUserPic","Join","useState","lUserName","lSetUserName","lPassword","lSetPassword","shouldRedirect","SetshouldRedirect","sendLogin","event","preventDefault","emit","UserName","Password","error","success","ProfilePic","alert","className","placeholder","type","onChange","target","value","onKeyDown","key","onClick","e","to","Rooms","RoomsBar","EnterRoom","CurrentRoom","length","map","room","i","_id","newRoom","RoomName","OnRoomClicked","src","icon","LastSender","LastMessage","Messages","messages","message","Sender","Date","createdAt","getHours","getMinutes","Message","NewChat","setMessage","SetCR","CurrentRoomMessages","SetCRM","setRoomsBar","PageMessage","useRef","useEffect","data","on","newLastMessageInfo","prevRoomsBar","newroomsbar","result","findIndex","newmessage","current","scrollTop","Number","MAX_SAFE_INTEGER","OldRoomName","NewRoom","RoomId","warn","sendMessage","req","Msg","aria-hidden","ref","onKeyPress","Register","File","SetFile","React","sendRegister","PPb64","HandleFileRead","alt","name","id","accept","file","files","size","toFixed","FileReader","onloadend","readAsDataURL","maxLength","App","path","exact","component","ReactDom","render","document","querySelector"],"mappings":"kOAEIA,EACAC,EACAC,ECGAC,E,gFDQSC,EAAY,WAMvB,OALKJ,IACHK,QAAQC,IAAI,iBACZN,EAASO,IALI,wCAQRP,GAGIQ,EAAoB,WAC/B,OAAOP,GAGIQ,EAAoB,SAACC,GAChCT,EAAWS,GAGAC,EAAmB,WAC9B,OAAOT,GAGIU,EAAmB,SAACF,GAC/BR,EAAcQ,GEuCDG,EArEF,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACVC,EADU,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEVG,EAFU,KAEAC,EAFA,OAG0BJ,oBAAS,GAHnC,mBAGVK,EAHU,KAGKC,EAHL,KAKXC,EAAY,SAACC,GAEjBA,EAAMC,iBAEHR,GAAaE,EAEdb,IAAYoB,KAAK,WAAY,CAAEC,SAAUV,EAAWW,SAAUT,IAAa,YAAoC,IAAjCU,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAAQC,EAAiB,EAAjBA,WAEvFF,GACFG,MAAMH,GAEFC,IAEEC,GAEFjB,EAAiBiB,GAGnBpB,EAAkBM,GAElBe,MAAMF,GAENR,GAAkB,OAM1BU,MAAM,mCASN,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,gBAAd,QACA,6BACE,2BAAOC,YAAY,OAAOD,UAAU,aAAaE,KAAK,OAAOC,SAAU,SAACZ,GAAD,OAAWN,EAAaM,EAAMa,OAAOC,UAC5G,2BAAOJ,YAAY,WAAWD,UAAU,aAAaE,KAAK,WAAWC,SAAU,SAACZ,GAAD,OAAWJ,EAAaI,EAAMa,OAAOC,QAAQC,UAbhH,SAACf,GACH,UAAdA,EAAMgB,KACRjB,EAAUC,OAcN,4BAAQS,UAAW,yBAA0BE,KAAK,SAASM,QAAS,SAAAC,GAAC,OAAInB,EAAUmB,KAAnF,WAEA,kBAAC,IAAD,CAAMC,GAAE,aACN,4BAAQV,UAAW,uBAAwBE,KAAK,UAAhD,cAIiB,IAAnBd,GACA,kBAAC,IAAD,CAAUsB,GAAE,c,QClBPC,G,MA9CD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,SAASC,EAA2B,EAA3BA,UAAUC,EAAiB,EAAjBA,YAYlC,OAAKF,EAGmB,IAApBA,EAASG,OACJ,8BAGJ,yBAAKf,UAAU,SACb,4BACGY,EAASI,KAAI,SAACC,EAAMC,GAAP,OACZ,wBACEX,IAAKU,EAAKE,IACVX,QAAS,SAACC,GAAD,OArBA,SAACK,EAAYM,GAE9BN,EAAYK,MAAQC,EAAQD,MAE/B7C,QAAQC,IAAI,YAAc6C,EAAQC,UAClCR,EAAUC,EAAYO,SAASD,IAgBJE,CAAcR,EAAaG,IAC3CjB,UAAWc,EAAYK,MAAQF,EAAKE,IAAM,aAAc,IAExD,yBAAKnB,UAAU,iBAEvB,yBAAKA,UAAU,kBACH,yBAAKuB,IAAKN,EAAKO,QAGjB,yBAAKxB,UAAU,mBACb,yBAAKA,UAAU,QAAQiB,EAAKI,UAC5B,yBAAKrB,UAAU,WAAWiB,EAAKQ,WAA/B,IAA4CR,EAAKS,qBAtBzD,gCCqBKC,G,MAhCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGlB,OAAKA,EAGmB,IAApBA,EAASb,OACL,8BAGF,4BACGa,EAASZ,KAAI,SAACa,EAASX,GAAV,OAEZ,wBAAIX,IAAKW,EAAGlB,UAAS,UAAK6B,EAAQC,SAAWrD,IAAsB,OAAS,KAC1E,yBAAKuB,UAAU,iBAEb,yBAAKA,UAAU,kBACb,yBAAKuB,IAAI,qDAGZ,yBAAKvB,UAAU,iBACZ,yBAAKA,UAAU,QAAf,IAAwB6B,EAAQC,OAAhC,OAA4C,IAAIC,KAAKF,EAAQG,WAAWC,WAAxE,IAAqF,IAAIF,KAAKF,EAAQG,WAAWE,aAAjH,KACA,yBAAKlC,UAAU,OAAO6B,EAAQM,gBAlBtC,gCCkPKC,EA5OC,WAAO,IAAD,EACUrD,mBAAS,IADnB,mBACb8C,EADa,KACJQ,EADI,OAEStD,mBAAS,IAFlB,mBAEb+B,EAFa,KAEAwB,EAFA,OAGkBvD,mBAAS,IAH3B,mBAGbwD,EAHa,KAGQC,EAHR,OAIYzD,mBAAS,IAJrB,mBAIb6B,EAJa,KAIH6B,EAJG,KAKdC,EAAcC,mBAEpBC,qBAAU,WAERvE,IAAYoB,KAAK,kBAAkB,YAAsB,IAAnBoD,EAAkB,EAAlBA,KAAkB,EAAZjD,MACtCiD,IACFJ,EAAYI,GAERA,EAAK,GAAG1B,KACVN,EAAU,GAAGgC,EAAK,QAIxBxE,IAAYyE,GAAG,mBAAmB,SAACC,GACjCN,GAAY,SAACO,GACX,IAAMC,EAAW,YAAOD,GAClBE,EAASD,EAAYE,WACzB,qBAAGhC,MAAkB4B,EAAmB5B,OAS1C,OANgB,IAAZ+B,IAEFD,EAAYC,GAAQxB,YAAcqB,EAAmBrB,YACrDuB,EAAYC,GAAQzB,WAAasB,EAAmBtB,YAG/CwB,QAIX5E,IAAYyE,GAAG,cAAc,SAACM,GAC5BZ,GAAO,SAACD,GAAD,4BAA6BA,GAA7B,CAAkDa,UAG3D9E,QAAQC,IAAI,yBAEX,IAEHqE,qBAAU,WACJF,EAAYW,UACdX,EAAYW,QAAQC,UAAYC,OAAOC,oBACxC,CAACjB,IAGJ,IAAM1B,EAAY,SAAC4C,EAAYC,GAG7BrF,IAAYoB,KACV,YACA,CACE4B,SAAUqC,EAAQrC,SAClBoC,YAAaA,EACbE,OAAQD,EAAQvC,IAChBzB,SAAUjB,MAEZ,YAAsB,IAAnBmB,EAAkB,EAAlBA,MAAOiD,EAAW,EAAXA,KACJjD,EAAOtB,QAAQsB,MAAMiD,GAChBA,IAEPP,EAAMoB,GACNlB,EAAOK,GACPvE,QAAQsF,KAAK,SAAWH,EAAc,4BAA8BC,EAAQrC,eAM9EwC,EAAc,SAACtE,GAEnB,GADAA,EAAMC,iBACDqC,EAAL,CAEA,IAAMiC,EAAM,CACVH,OAAQ7C,EAAYK,IACpBE,SAAUP,EAAYO,SACtB0C,IAAK,CAAEjC,OAAQrD,IAAqB0D,QAASN,EAAUG,UAAW,IAAID,OAIxES,GAAO,SAACD,GAAD,4BAA6BA,GAA7B,CAAkDuB,EAAIC,SAG7D1F,IAAYoB,KAAK,oBAAqBqE,GAAK,YAAsB,IAAnBlE,EAAkB,EAAlBA,MAAOiD,EAAW,EAAXA,KAC/CjD,EACFtB,QAAQsB,MAAMiD,GACPA,IACPR,EAAW,IACX/D,QAAQsF,KAAKf,SAMnB,OAAKpE,IAMH,6BACE,yBAAKuB,UAAU,mBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKuB,IAAK3C,OAGZ,yBAAKoB,UAAU,mBACb,gCACE,uBAAGA,UAAU,gBAAgBgE,cAAY,SACzC,8BAAOvF,QAKb,kBAAC,EAAD,CACEmC,SAAUA,EACVE,YAAaA,EACbD,UAAWA,IAIb,yBAAKb,UAAU,WACb,yBAAKA,UAAU,oBACb,gCACE,uBAAGA,UAAU,wBAAwBgE,cAAY,SACjD,+CAIJ,yBAAKhE,UAAU,oBACb,gCACE,uBAAGA,UAAU,kBAAkBgE,cAAY,SAC3C,8CAMR,yBAAKhE,UAAU,QAEb,yBAAKA,UAAU,YACb,yBAAKuB,IAAKT,EAAYU,OACtB,2BAAIV,EAAYO,WAIlB,yBAAK4C,IAAKvB,EAAa1C,UAAW,YAChC,kBAAC,EAAD,CAAU4B,SAAUW,KAGtB,yBAAKvC,UAAU,iBACb,yBAAKA,UAAU,cACb,2BAAOE,KAAK,OAAOD,YAAY,wBAC/BI,MAAOwB,EACP1B,SAAU,gBAAaE,EAAb,EAAGD,OAAUC,MAAb,OAA2BgC,EAAWhC,IAChD6D,WAAY,SAAA3E,GAAK,MAAkB,UAAdA,EAAMgB,IAAkBsD,EAAYtE,GAAS,SAIpE,yBAAKS,UAAU,cACb,4BAAQQ,QAAS,SAAAC,GAAC,OAAIoD,EAAYpD,KAChC,uBAAGT,UAAU,oBAAoBgE,cAAY,SAC7C,sCAtEP,kBAAC,IAAD,CAAUtD,GAAE,OJQRyD,G,MAhHE,WAAO,IAAD,EACcpF,mBAAS,IADvB,mBACZC,EADY,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAEZG,EAFY,KAEFC,EAFE,OAGIJ,mBAAS,IAHb,mBAGZqF,EAHY,KAGPC,EAHO,OAIwBC,IAAMvF,UAAS,GAJvC,mBAIZK,EAJY,KAIGC,EAJH,KAMbkF,EAAe,SAAChF,GACpBA,EAAMC,iBAEHR,GAAaE,GAAakF,EAE3B/F,IAAYoB,KAAK,cAAe,CAAEC,SAAUV,EAAWW,SAAUT,EAAWsF,MAAQJ,IAAO,YAAyB,IAAtBxE,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAE/FD,GACFG,MAAMH,GAEJC,IAEFE,MAAMF,GAENnB,EAAkBM,GAEL,KAAToF,GACFvF,EAAiBuF,GAEnB/E,GAAkB,OAMtBU,MAAM,0CAGJ0E,EAAiB,SAAChE,GAEtB4D,EAAQjG,EAAW8E,SAsDrB,OACE,yBAAKlD,UAAU,YACb,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,eAAd,YACA,6BAhCS,KAAToE,EAEA,yBAAKpE,UAAU,+BACf,yBAAKA,UAAU,qBAAqBuB,IAAK6C,EAAMM,IAAI,aAMrD,yBAAK1E,UAAU,+BACf,2BAAOA,UAAU,cAAc2E,KAAK,UAAUC,GAAG,eAAe1E,KAAK,OAAO2E,OAAO,mCAAmC1E,SAAU,SAAAM,GAlC3G,IAACqE,MAkCgIrE,EAAEL,OAAO2E,MAAM,IAhC/IC,KAAK,KAAM,MAAMC,QAAQ,GAElC,EAEblF,MAAM,+BAIR3B,EAAa,IAAI8G,YACNC,UAAYV,EACvBrG,EAAWgH,cAAcN,OAuBtB,yBAAK9E,UAAU,uBACd,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mBAAkB,uBAAGA,UAAU,wBAC9C,yBAAKA,UAAU,mBACb,2DACA,0BAAMA,UAAU,aAAhB,gBAGA,uBAAIA,UAAU,8BAAd,mBAeF,2BAAOC,YAAY,OAAOoF,UAAU,KAAKrF,UAAU,YAAYE,KAAK,OAAOC,SAAU,SAACZ,GAAD,OAAWN,EAAaM,EAAMa,OAAOC,UAC1H,2BAAOJ,YAAY,WAAWoF,UAAU,KAAKrF,UAAU,YAAYE,KAAK,WAAWC,SAAU,SAACZ,GAAD,OAAWJ,EAAaI,EAAMa,OAAOC,QAAQC,UA5C5H,SAACf,GACH,UAAdA,EAAMgB,KACRgE,EAAahF,OA4CT,4BAAQS,UAAW,sBAAuBE,KAAK,SAASM,QAAS,SAAAC,GAAC,OAAI8D,EAAa9D,KAAnF,aACoB,IAAnBrB,GACA,kBAAC,IAAD,CAAUsB,GAAE,eK7FV4E,EAVH,WACR,OACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3G,IACjC,kBAAC,IAAD,CAAOyG,KAAK,QAAQE,UAAWrD,IAC/B,kBAAC,IAAD,CAAOmD,KAAK,YAAYE,UAAWtB,MCT3CuB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,Y","file":"static/js/main.59d24e33.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n\r\nlet socket;\r\nlet username;\r\nlet userpicture;\r\n\r\n/*\r\n * localhost:5000\r\n * https://dark-chat-22.herokuapp.com/\r\n */\r\n\r\n /*eslint-disable */\r\nconst LOCALENDPOINT = \"localhost:5000\";\r\nconst ENDPOINT = \"https://dark-chat-22.herokuapp.com/\";\r\n  /*eslint-enable */\r\nexport const GetSocket = () => {\r\n  if (!socket) {\r\n    console.log(\"Socket Inited\");\r\n    socket = io(ENDPOINT);\r\n  }\r\n\r\n  return socket;\r\n};\r\n\r\nexport const GlobalGetUserName = () => {\r\n  return username;\r\n};\r\n\r\nexport const GlobalSetUserName = (un) => {\r\n  username = un;\r\n};\r\n\r\nexport const GlobalGetUserPic = () => {\r\n  return userpicture;\r\n};\r\n\r\nexport const GlobalSetUserPic = (un) => {\r\n  userpicture = un;\r\n};\r\n","import React, { useState } from \"react\"\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport \"./Register.css\"\r\n\r\nimport {GetSocket,GlobalSetUserName,GlobalSetUserPic} from \"../../Socket.js\"\r\n\r\nlet filereader;\r\n\r\nconst Register = () => {\r\n    const [lUserName,lSetUserName] = useState(\"\");\r\n    const [lPassword,lSetPassword] = useState(\"\");\r\n    const [File,SetFile] = useState(\"\");\r\n    const [shouldRedirect,SetshouldRedirect] = React.useState(false);\r\n   \r\n    const sendRegister = (event) => {\r\n      event.preventDefault();\r\n      \r\n      if(lUserName && lPassword && File) {\r\n\r\n        GetSocket().emit('RegisterMsg', { UserName: lUserName, Password: lPassword, PPb64 : File}, ({ error, success }) => {\r\n         \r\n          if (error)\r\n            alert(error);      \r\n         \r\n          if (success)\r\n          {\r\n            alert(success);      \r\n           \r\n            GlobalSetUserName(lUserName);\r\n            \r\n            if (File !== \"\")\r\n              GlobalSetUserPic(File);\r\n\r\n            SetshouldRedirect(true);\r\n          }\r\n            \r\n        });\r\n      }\r\n      else  \r\n        alert(\"Username,Password,ProfilePic Required\");  \r\n    }\r\n\r\n    const HandleFileRead = (e) =>\r\n    {   \r\n      SetFile(filereader.result); \r\n    }\r\n    \r\n    const HandleFileChosen = (file) =>\r\n    {\r\n      const filesize = ((file.size/1024)/1024).toFixed(4); // MB\r\n\r\n      if (filesize > 3)\r\n      {\r\n        alert(\"File Is To Big (3 MB) MAX\");\r\n        return;\r\n      }\r\n\r\n      filereader = new FileReader();\r\n      filereader.onloadend = HandleFileRead;\r\n      filereader.readAsDataURL(file);  \r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n      if (event.key === 'Enter') {\r\n        sendRegister(event);\r\n      }\r\n    }\r\n      \r\n\r\n    function SmartDragDrop() {\r\n      \r\n      if (File !== \"\") {\r\n        return (    \r\n          <div className=\"Neon Neon-theme-dragdropbox\">\r\n          <img className=\"reg-selected-image\" src={File} alt=\"Red dot\" />\r\n          </div>\r\n        );\r\n      }\r\n      \r\n      return (\r\n        <div className=\"Neon Neon-theme-dragdropbox\">\r\n        <input className=\"reg-myinput\" name=\"files[]\" id=\"filer_input2\" type=\"file\" accept=\"image/x-png,image/gif,image/jpeg\" onChange={e => HandleFileChosen(e.target.files[0])}/>     \r\n         <div className=\"Neon-input-dragDrop\">\r\n          <div className=\"Neon-input-inner\">\r\n            <div className=\"Neon-input-icon\"><i className=\"fa fa-file-image-o\"></i></div>\r\n            <div className=\"Neon-input-text\">\r\n              <h3>Upload Your Profile Picture</h3> \r\n              <span className=\"spanstyle\">Drag &amp; Drop</span>\r\n              </div>\r\n              { /* eslint-disable-next-line */ }\r\n              <a  className=\"Neon-input-choose-btn blue\">Browse Files</a>\r\n              { /* eslint-disable-next-line*/ }\r\n              </div>\r\n              </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"reg-main\">\r\n        <div className=\"reg-OuterContainer\">\r\n        <div className=\"reg-InnerContainer\">\r\n          <h1 className=\"reg-heading\">Register</h1>           \r\n          <div>  \r\n            {SmartDragDrop()}\r\n            <input placeholder=\"Name\" maxLength=\"18\" className=\"reg-Input\" type=\"text\" onChange={(event) => lSetUserName(event.target.value)} />\r\n            <input placeholder=\"Password\" maxLength=\"20\" className=\"reg-Input\" type=\"password\" onChange={(event) => lSetPassword(event.target.value)} onKeyDown={handleKeyDown}/>\r\n          </div>       \r\n            <button className={'reg-regbutton mt-20'} type=\"submit\" onClick={e => sendRegister(e)}>Register</button> \r\n            {shouldRedirect === true &&\r\n             <Redirect to={`/chat`} /> \r\n            }   \r\n        </div>\r\n\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Register;","import React,{ useState}  from \"react\"\r\nimport {Link,Redirect} from \"react-router-dom\"\r\nimport \"./Join.css\"\r\n\r\nimport {GetSocket,GlobalSetUserName,GlobalSetUserPic} from \"../../Socket.js\"\r\n\r\n\r\nconst Join = () => {\r\n  const [lUserName,lSetUserName] = useState(\"\");\r\n  const [lPassword,lSetPassword] = useState(\"\");\r\n  const [shouldRedirect,SetshouldRedirect] = useState(false);\r\n\r\n  const sendLogin = (event) => {\r\n    \r\n    event.preventDefault();\r\n   \r\n    if(lUserName && lPassword) {\r\n     \r\n      GetSocket().emit('LoginMsg', { UserName: lUserName, Password: lPassword }, ({ error, success,ProfilePic }) => {\r\n       \r\n        if (error)\r\n          alert(error);      \r\n       \r\n          if (success)\r\n          {          \r\n            if (ProfilePic)  \r\n            {\r\n              GlobalSetUserPic(ProfilePic);\r\n            }     \r\n\r\n            GlobalSetUserName(lUserName);  \r\n                     \r\n            alert(success); \r\n             \r\n            SetshouldRedirect(true);\r\n          }\r\n\r\n      });\r\n    } \r\n    else  \r\n    alert(\"Username And Password Required\");  \r\n  }\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      sendLogin(event);\r\n    }\r\n  }\r\n    \r\n    return (\r\n      <div className=\"join-main\">\r\n        <div className=\"join-OuterContainer\">\r\n        <div className=\"join-InnerContainer\">\r\n          <h1 className=\"join-heading\">Join</h1>\r\n          <div>\r\n            <input placeholder=\"Name\" className=\"join-Input\" type=\"text\" onChange={(event) => lSetUserName(event.target.value)} />\r\n            <input placeholder=\"Password\" className=\"join-Input\" type=\"password\" onChange={(event) => lSetPassword(event.target.value)} onKeyDown={handleKeyDown} />\r\n          </div>\r\n\r\n          <button className={'join-loginbutton mt-20'} type=\"submit\" onClick={e => sendLogin(e)}>Sign In</button> \r\n\r\n          <Link to={`/register`}>\r\n            <button className={'join-regbutton mt-20'} type=\"submit\">Register</button>\r\n          </Link>\r\n\r\n          {\r\n          shouldRedirect === true &&\r\n          <Redirect to={`/chat`} />         \r\n          }   \r\n\r\n        </div>\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Join;","import React  from 'react'\r\nimport classNames from \"classnames\";\r\n\r\nconst Rooms = ({RoomsBar,EnterRoom,CurrentRoom}) => {\r\n\r\n\t/* Set Current Room ID */\r\n\tconst OnRoomClicked = (CurrentRoom,newRoom) => \r\n\t{\r\n\t\tif (CurrentRoom._id !== newRoom._id)\r\n\t\t{\r\n\t\t\tconsole.log(\"Entering \" + newRoom.RoomName)\r\n\t\t\tEnterRoom(CurrentRoom.RoomName,newRoom);\r\n\t\t}\t\r\n\t}\r\n\r\n\tif (!RoomsBar)\r\n\t\treturn (<div></div>);\r\n\r\n\tif (RoomsBar.length === 0)\r\n\t\treturn (<div></div>);\r\n\r\n    return (\r\n      <div className=\"rooms\">\r\n        <ul>\r\n          {RoomsBar.map((room, i) => (\r\n            <li\r\n              key={room._id}\r\n              onClick={(e) => OnRoomClicked(CurrentRoom, room)}\r\n              className={CurrentRoom._id === room._id ? \"activeroom\" :\"\"} \r\n\t\t\t  >\r\n              <div className=\"itemcontainer\">\r\n              \r\n\t\t\t   <div className=\"imagecontainer\">\r\n                  <img src={room.icon} />\r\n                </div>\r\n\r\n                <div className=\"bannercontainer\">\r\n                  <div className=\"name\">{room.RoomName}</div>\r\n                  <div className=\"preview\">{room.LastSender}:{room.LastMessage}</div>\r\n                </div>\r\n\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Rooms;","import React from \"react\";\r\nimport {GlobalGetUserName} from \"../../../Socket.js\";\r\n\r\nimport \"../NewChat.css\";\r\n\r\nconst Messages = ({ messages }) => {\r\n  /* Set Current Room ID */\r\n\r\n  if (!messages)\r\n\t\treturn (<div></div>);\r\n\r\n  if (messages.length === 0)\r\n\t\treturn (<div></div>);\r\n  \r\n  return (\r\n        <ul>\r\n          {messages.map((message, i) => (\r\n\r\n            <li key={i} className={`${message.Sender === GlobalGetUserName() ? \"mine\" : \"\"}`}>\r\n              <div className=\"itemcontainer\">\r\n                \r\n                <div className=\"imagecontainer\">\r\n                  <img src=\"http://emilcarlsson.se/assets/harveyspecter.png\" />\r\n                </div>\r\n\r\n               <div className=\"mgscointainer\">       \r\n                  <div className=\"info\"> {message.Sender} at {new Date(message.createdAt).getHours()}:{new Date(message.createdAt).getMinutes()} </div>\r\n                  <div className=\"msg\">{message.Message}</div>\r\n                </div>\r\n      \r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul> \r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import React, { useEffect, useState,useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Rooms from \"./ChatComponents/Rooms\";\r\nimport Contacts from \"./ChatComponents/Contacts\";\r\nimport Messages from \"./ChatComponents/Messages\";\r\nimport \"./NewChat.css\";\r\nimport {\r\n  GlobalGetUserName,\r\n  GlobalGetUserPic,\r\n  GetSocket,\r\n} from \"../../Socket.js\";\r\n\r\n//useRef define Global var\r\n//useState enter a func as param 1 it will only run it once\r\n\r\nconst NewChat = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [CurrentRoom, SetCR] = useState({});\r\n  const [CurrentRoomMessages, SetCRM] = useState([]);\r\n  const [RoomsBar, setRoomsBar] = useState([]);\r\n  const PageMessage = useRef()\r\n  /*On Mount */\r\n  useEffect(() => {\r\n   \r\n    GetSocket().emit(\"RoomBasicInfos\", ({ data, error }) => {\r\n      if (data) {\r\n        setRoomsBar(data);\r\n    \r\n        if (data[0]._id) \r\n          EnterRoom(\"\",data[0]);\r\n      }\r\n    });\r\n\r\n    GetSocket().on(\"roomlastmessage\", (newLastMessageInfo) => {\r\n      setRoomsBar((prevRoomsBar) => {\r\n        const newroomsbar = [...prevRoomsBar];\r\n        const result = newroomsbar.findIndex(\r\n          ({ _id }) => _id === newLastMessageInfo._id\r\n        );\r\n\r\n        if (result !== -1) \r\n        {\r\n          newroomsbar[result].LastMessage = newLastMessageInfo.LastMessage;\r\n          newroomsbar[result].LastSender = newLastMessageInfo.LastSender;\r\n        }\r\n     \r\n        return newroomsbar;\r\n      });\r\n    });\r\n\r\n    GetSocket().on(\"newmessage\", (newmessage) => {\r\n      SetCRM((CurrentRoomMessages) => [...CurrentRoomMessages, newmessage]);\r\n    });\r\n\r\n    console.log(\"Successfully Inited\");\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (PageMessage.current)\r\n      PageMessage.current.scrollTop = Number.MAX_SAFE_INTEGER\r\n  }, [CurrentRoomMessages]);\r\n\r\n  /* Do this when we change CurrentRoom */\r\n  const EnterRoom = (OldRoomName,NewRoom) => {\r\n    /* Get CurrentRoom Old Messages*/\r\n\r\n    GetSocket().emit(\r\n      \"EnterRoom\",\r\n      {\r\n        RoomName: NewRoom.RoomName,\r\n        OldRoomName: OldRoomName,\r\n        RoomId: NewRoom._id,\r\n        UserName: GlobalGetUserName(),\r\n      },\r\n      ({ error, data }) => {\r\n        if (error) console.error(data);\r\n        else if (data) {\r\n          /* Change Our CurrentRoommessages*/\r\n          SetCR(NewRoom);\r\n          SetCRM(data);\r\n          console.warn(\"Left: \" + OldRoomName + \" And Succesfully Joined: \" + NewRoom.RoomName);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    if (!message) return;\r\n\r\n    const req = {\r\n      RoomId: CurrentRoom._id,\r\n      RoomName: CurrentRoom.RoomName,\r\n      Msg: { Sender: GlobalGetUserName(), Message: message , createdAt: new Date()},\r\n    };\r\n\r\n    /* Put Our New Message to our base*/\r\n    SetCRM((CurrentRoomMessages) => [...CurrentRoomMessages, req.Msg]);\r\n\r\n    /* Send New Message to Server*/\r\n    GetSocket().emit(\"SendMessageToRoom\", req, ({ error, data }) => {\r\n      if (error)  \r\n        console.error(data);\r\n      else if (data) {\r\n        setMessage(\"\");\r\n        console.warn(data);\r\n      }\r\n    }); \r\n  };\r\n\r\n   /* Page is refreshed by F5 go back to login*/\r\n  if (!GlobalGetUserName()) {\r\n    return <Redirect to={`/`} />;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"frame-container\">\r\n        <div className=\"frame\">\r\n          <div className=\"sidepanel\">\r\n            <div className=\"top\">\r\n              <div className=\"imagecontainer\">\r\n                <img src={GlobalGetUserPic()} />\r\n              </div>\r\n\r\n              <div className=\"bannercontainer\">\r\n                <button>\r\n                  <i className=\"fa fa-id-card\" aria-hidden=\"true\"></i>\r\n                  <span>{GlobalGetUserName()}</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <Rooms\r\n              RoomsBar={RoomsBar}\r\n              CurrentRoom={CurrentRoom}\r\n              EnterRoom={EnterRoom}\r\n            />\r\n\r\n        \r\n            <div className=\"buttons\">\r\n              <div className=\"buttonscontainer\">\r\n                <button>\r\n                  <i className=\"fa fa-user-plus fa-fw\" aria-hidden=\"true\"></i>\r\n                  <span>Create Room</span>\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"buttonscontainer\">\r\n                <button>\r\n                  <i className=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i>\r\n                  <span>Settings</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"main\">\r\n           \r\n            <div className=\"roominfo\">\r\n              <img src={CurrentRoom.icon} />\r\n              <p>{CurrentRoom.RoomName}</p>\r\n            </div>\r\n            \r\n            \r\n            <div ref={PageMessage} className={\"messages\"}>     \r\n              <Messages messages={CurrentRoomMessages}></Messages>      \r\n            </div>\r\n\r\n            <div className=\"message-input\">\r\n              <div className=\"inputfield\">\r\n                <input type=\"text\" placeholder=\"Write your message...\"\r\n                value={message}\r\n                onChange={({ target: { value } }) => setMessage(value)}\r\n                onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\r\n                 />\r\n              </div>\r\n\r\n              <div className=\"sendbutton\">\r\n                <button onClick={e => sendMessage(e)}>\r\n                  <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                  <span></span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div id=\"mainbody\">\r\n      <div id=\"frame\">\r\n        <div id=\"sidepanel\">\r\n          <div id=\"search\">\r\n            <img id=\"profile-img\" src={GlobalGetUserPic()} alt=\"\" />\r\n            <input type=\"text\" placeholder=\"Search contacts...\" />\r\n          </div>\r\n        \r\n            <Rooms\r\n              RoomsBar={RoomsBar}\r\n              CurrentRoom={CurrentRoom}\r\n              EnterRoom={EnterRoom}\r\n            />\r\n    \r\n          <Contacts></Contacts>\r\n\r\n          <div id=\"bottom-bar\">\r\n            <button id=\"addcontact\">\r\n              <i className=\"fa fa-globe fa-fw\" aria-hidden=\"true\"></i>{\" \"}\r\n              <span>Add Room</span>\r\n            </button>\r\n            <button id=\"settings\">\r\n              <i className=\"fa fa-id-card\" aria-hidden=\"true\"></i>\r\n              <span>{GlobalGetUserName()}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"content\">\r\n          <div className=\"contact-profile\">\r\n            <img src={CurrentRoom.icon} alt=\"\" />\r\n            <p>{CurrentRoom.RoomName}</p>\r\n          </div>\r\n      \r\n          <Messages messages={CurrentRoomMessages}></Messages>       \r\n\r\n          <div className=\"message-input\">\r\n            <div className=\"wrap\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Write your message...\"\r\n                value={message}\r\n                onChange={({ target: { value } }) => setMessage(value)}\r\n                onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\r\n              />\r\n              <i className=\"fa fa-paperclip attachment\" aria-hidden=\"true\"></i>\r\n              <button className=\"submit\" onClick={e => sendMessage(e)}>\r\n                <i className=\"fa fa-paper-plane\" aria-hidden=\"true\" ></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewChat;\r\n","import React from \"react\"\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\r\n\r\nimport Join from \"./Components/Join/Join\"\r\nimport NewChat from \"./Components/NewChat/NewChat\"\r\nimport Register from \"./Components/Register/Register\"\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n        <Route path=\"/\" exact component={Join} />\r\n        <Route path=\"/chat\" component={NewChat}/>\r\n        <Route path=\"/register\" component={Register} />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*\r\n* Route path=\"/chat\" render={(props) => (<Chat {...props} Username={Username} /> )}></Route>\r\n*/","import React from \"react\"\r\nimport ReactDom from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\nReactDom.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}